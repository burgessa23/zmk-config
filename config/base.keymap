#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // requires auto-layer module
#include <dt-bindings/zmk/keys.h>
#ifdef CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "zmk-helpers/helper.h"

#define DEF 0
#define COLEMAK 1
#define NAV 2
#define SYM 3
#define NUM 4
#define FN 5
#define SYS 6
#define MOUSE 7

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.9s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#ifndef LH2
    #define THUMBS LH1 LH0 RH0 RH1                                          // thumbs on 34 keys
#else
    #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                  // thumbs on 36+ keys
#endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(s_hmr, &hmr_sshft, &kp, KEYS_L KEYS_R THUMBS)  // smart-shift HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// HRM combo hack - workaround for lack of tap-only combos (ZMK issue #544)
#define ZMK_COMBO_8(NAME, TAP, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE, HOLD, SIDE) \
    MAKE_HRM(hm_combo_ ## NAME, &kp, TAP, SIDE THUMBS) \
    ZMK_COMBO_6(NAME, &hm_combo_ ## NAME HOLD 0, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE)

/* Combos, leader key sequences, mouse emulation */

#include "mouse.dtsi"
#include "extra_behaviours.dtsi"
#include "combos.dtsi"  // must be sources after HRM-combo hack
#include "leader.dtsi"





/* Nav cluster */

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_RSFT)>;
)

ZMK_MOD_MORPH(hmr_sshft,
    bindings = <&kp RSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

// smart-mouse, requires PR #1366
ZMK_TRI_STATE(
    smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions =
        <LT1 LT3 LM1 LM2 LM3 LM4 LH0 LH1 RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3 RH0 RH1>;
    ignored-layers = <MOUSE NAV FN>;)

/* Custom behaviors */


// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: enter | hold: num-layer | shift + hold: num_word
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_morph>;
)
SIMPLE_MORPH(num_morph, SFT, &kp RET, &num_word NUM)

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
#define SMART_COMMA &smart_comma SEMICOLON 0
ZMK_HOLD_TAP(smart_comma,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&comma_morph>;
)
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp LESS_THAN)
// SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
#define SMART_DOT &smart_dot COLON 0
ZMK_HOLD_TAP(smart_dot,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&dot_morph>;
)
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp GREATER_THAN)
// SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: excl | shift + tap: qmark
SIMPLE_MORPH(qexcl, SFT, &kp EXCL, &kp QMARK)

// tap: left/right parenthesis | shft + tap: less-than/greater-than
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_HOLD_TAP(lt_spc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: copy | double-tap: cut
ZMK_TAP_DANCE(copy_cut,
    tapping-term-ms = <200>;
    bindings = <&kp LG(C)>, <&kp LG(X)>;
)

// tap: q | hold / double-tap: esc                                                                                                
ZMK_HOLD_TAP(q_esc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&q_esc_taps>;
)
ZMK_TAP_DANCE(q_esc_taps,
    tapping-term-ms = <250>;
    bindings = <&kp Q>, <&kp ESC>;
)

// tap: LBRC | double-tap: RBRC
ZMK_TAP_DANCE(braces,
    tapping-term-ms = <250>;
    bindings = <&kp LBRC>, <&kp RBRC>;
)

// tap: Paste | double-tap: paste buffer
ZMK_TAP_DANCE(paste_buff,
    tapping-term-ms = <280>;
    bindings = <&kp LG(V)>, <&kp LA(LS(C))>;
)

// hold: LGUI | tap: raycast | shift-tap: raycast copy buffer | double-tap: aerospace switcher
ZMK_HOLD_TAP(gui_ray_switch,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&gui_ray_switch_dance>;
)
ZMK_TAP_DANCE(gui_ray_switch_dance,
    tapping-term-ms = <250>;
    bindings = <&ray_morph>, <&kp RG(LC(LA(A)))>;
)
SIMPLE_MORPH(ray_morph, SFT, &kp LC(SPACE), &kp LA(LS(C)))


ZMK_HOLD_TAP(ldr_fn_tab,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&ldr_fn_tab_tap>;
)

ZMK_TAP_DANCE(ldr_fn_tab_tap,
    tapping-term-ms = <250>;
    bindings = <&tab_morph>, <&leader>;
)

SIMPLE_MORPH(tab_morph, SFT, &kp TAB, &smart_mouse)

// Sticky shift + leader
/* ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;) */

// misc aliases
#define CANCEL          &kp K_CANCEL             // cancel caps-word, num-word and smart-mouse
#define DSK_PREV        &kp LS(LA(LG(LC(TAB))))  // previous desktop
#define DSK_NEXT        &hmr LGUI LA(LG(LC(TAB)))  // next     desktop
#define AS(keycode)     &as LS(keycode) keycode
#define GRID            &kp LC(LG(LA(G)))
#define HINT            &kp LG(LA(H))
#define ESC_SWITCH_COPY &esc_switch_copy RG(LC(LALT)) 0
// #define GUI_RAY_SWITCH  &gui_ray_switch RG(LC(LALT)) 0
#define GUI_RAY_SWITCH  &gui_ray_switch LGUI 0
#define LDR_FN_TAB      &ldr_fn_tab FN 0
#define Q_EXCL_SLSH     &q_excl_slsh QMARK 0
#define SYM_DEL         &lt SYM BSPC
#define HMR_J_SSHFT     &s_hmr 0 J
#define AERO_FWD        &aero_fwd LA(SQT) LA(L)
#define AERO_BACK       &aero_back LA(H) LA(J)
#define Q_ESC           &q_esc ESC 0
#define F12_ALT_MEH     &f12_alt_meh LALT 0

/* Keymap */

ZMK_CONDITIONAL_LAYER(Sys,NAV NUM, SYS)  // NAV + NUM --> SYS
// ZMK_CONDITIONAL_LAYER(Colemak, SYM FN,  COLEMAK)  // SYM + FN --> COLEMAK


#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif

// QWERTY
ZMK_BASE_LAYER(Base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   Q_ESC         AS(W)         AS(E)          AS(R)         AS(T)       ,   AS(Y)         AS(U)         AS(I)         AS(O)         AS(P)       ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &hml LGUI A   &hml LALT S   &hml LCTRL D  &hml LSHFT F  AS(G)        ,   AS(H)         &hmr RSHFT J  &hmr LCTRL K  &hmr LALT L  &hmr LGUI SQT,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   AS(Z)         AS(X)         AS(C)         AS(V)         AS(B)        ,   AS(N)         AS(M)         SMART_COMMA   SMART_DOT    Q_EXCL_SLSH  ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                             &lt_spc NAV 0 LDR_FN_TAB   ,   SYM_DEL       SMART_NUM                                              
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯                                          
)

ZMK_BASE_LAYER(Colemak,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   Q_ESC          AS(W)         AS(F)         AS(P)         AS(B)       ,   AS(J)         AS(L)         AS(U)         AS(Y)         AS(SQT)     ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &hml LGUI A   &hml LALT R   &hml LCTRL S  &hml LSHFT T  AS(G)       ,   AS(M)         &hmr RSHFT N  &hmr LCTRL E  &hmr LALT I   &hmr LGUI O ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    AS(Z)         AS(X)         AS(C)         AS(D)         AS(V)       ,   AS(K)         AS(H)         SMART_COMMA   SMART_DOT    Q_EXCL_SLSH  ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                             &lt_spc NAV 0  LDR_FN_TAB  ,   SYM_DEL        SMART_NUM
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)

ZMK_BASE_LAYER(Nav,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   &kp LG(Z)       &kp LG(X)     &copy_cut    &paste_buff  &kp LS(LG(Z)),    &kp PG_DN      &kp HOME      &kp UP        &kp END       &kp PG_UP ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &kp LGUI        &kp LALT      &kp LCTRL     &kp LSHFT   &kp LG(LS(C)),   &kp LG(LBKT)    &kp LEFT      &kp DOWN     &kp RIGHT   &kp LG(RBKT) ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &sk LGUI        &sk LALT      &sk LCTRL     &sk LSHFT    &kp LC(TAB) ,   &kp LG(LEFT) &kp LA(LEFT)  &kp LS(LG(J)) &kp LA(RIGHT) &kp LG(RIGHT),
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                             ___           ___          ,    &swapper           ___                                              
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯                                          
)

ZMK_BASE_LAYER(Sym,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp PIPE    &kp AMPS       &kp ASTRK    &kp PIPE       &kp PRCNT  ,    &kp PG_DN      &kp HOME      &kp UP        &kp END      &kp PG_UP  , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp LGUI    &kp DLLR       &kp PRCNT    &kp CARET      &kp PLUS   ,    &kp LC(UP)     &kp LEFT      &kp DOWN      &kp RIGHT  &kp LC(DOWN) ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp LBKT     &qexcl        &kp AT       &kp HASH       &kp RBKT   ,  &kp LS(LG(Z))    &u_left       &braces       &u_right     &kp LG(Z)  ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              &kp LPAR       &kp RPAR   ,    ___           &swapper                                              
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯                                          
)

ZMK_BASE_LAYER(Num,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   AS(BSLH)         AS(N7)       AS(N8)         AS(N9)       AS(N5)     ,    &kp MINUS        ___           ___          ___           ___      , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___              AS(N4)       AS(N5)         AS(N6)       AS(EQUAL)  ,    &kp UNDER     &kp RSHFT    &kp LCTRL       &kp LALT    &kp LGUI    ,  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   AS(GRAVE)        AS(N1)       AS(N2)         AS(N3)     ___          ,    &kp PLUS          ___        ___              ___           ___    , 
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                                AS(N0)      ___         ,    ___           ___                                                     
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯                                                
)

ZMK_BASE_LAYER(Fn,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   &kp F12       &kp F7        &kp F8        &kp F9         ___         ,   &kp F15       &kp C_PREV   &kp C_VOL_UP    &kp C_NEXT   GRID        ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &hml LGUI F11 &hml LALT F4  &hml LCTRL F5 &hml LSHFT F6  ___         ,   &kp F14        DSK_PREV    &kp C_VOL_DN    DSK_NEXT     HINT        ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp F10       &kp F1       &kp F2        &kp F3         ___         ,   &kp F13      &kp LG(LS(O)) &kp LG(LS(M))  &kp C_PP      ___         ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                                   ___      &kp TAB     ,   ___          &kp C_MUTE
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)

ZMK_BASE_LAYER(Sys,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                               _BT_SEL_KEYS_                            ,    &tog 1           ___           ___           ___           ___        ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           ___           ___           &bootloader  ,    &bootloader   ___           ___           ___           ___        ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           ___           ___           &sys_reset   ,    &sys_reset    ___           ___           ___           ___        ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                             ___           ___          ,    ___           ___                                                   
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯                                          
)

ZMK_BASE_LAYER(Mouse,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           ___         ,   U_WH_U           U_WH_L      U_MS_U         U_WH_R       U_WH_U     ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT     ___         ,   U_WH_D           U_MS_L      U_MS_D         U_MS_R       U_WH_D     ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___         ,   ___            &mkp LCLK     &mkp MCLK      &mkp RCLK    ___        ,
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                              ___           ___         ,   &mkp LCLK      &mkp RCLK
//                                          ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)

/* vim: set ft=c tw=174: */
